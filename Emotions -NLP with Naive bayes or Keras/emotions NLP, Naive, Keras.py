# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SN_HQd0JDsMh4P6UT8RaDleuSEzJGwPX
"""

import pandas as pd
import numpy as np
import nltk

df=pd.read_csv('train.txt', header=None)

df.columns={'test'}

df['text']=[i.split(';')[0] for i in df.test]

df['emotion']=[i.split(';')[1] for i in df.test]

df=df.drop('test', 1)
df.head()

df.emotion.unique()

"""Cleaning the data using NLTK

"""

import re

from nltk.corpus import stopwords
nltk.download('stopwords')
sw=stopwords.words('english')

def clean_text(x):
  x=x.lower()
  x=re.sub('\W+', ' ',x).strip()
  x=re.sub('\d+', ' ', x).strip()
  x=re.sub('\s+', ' ', x).strip()
  x=[i for i in x.split() if i not in sw]
  x=[i for i in x if len(i)>2]
  x=' '.join(x).strip()
  return x

df.text=df.text.apply(clean_text)

df.head()

"""Fitting model and prediction"""

from sklearn.feature_extraction.text import CountVectorizer
vec=CountVectorizer(ngram_range=(1,2), max_features=1000)

count_sent=vec.fit_transform(df.text)

x=count_sent.toarray()

y=df.emotion

from sklearn.naive_bayes import MultinomialNB
mn=MultinomialNB()

from sklearn.model_selection import train_test_split
xtrain, xtest, ytrain, ytest=train_test_split(x, y, test_size=0.2, random_state=1)

mn.fit(xtrain, ytrain)

mn.score(xtest, ytest)

"""testing the model"""

a={'test':'i feel really sad and happy and happy and happy'}
a=pd.DataFrame(data=a, index={'test'})
a.head()

a=vec.transform(a.test)

b=a.toarray()

mn.predict(b)



"""using keras"""

from sklearn.preprocessing import LabelEncoder
lb=LabelEncoder()
y=lb.fit_transform(y)
y.shape

from keras.utils import to_categorical
y=to_categorical(y)

y[0]

from tensorflow.keras import Sequential
from tensorflow.keras.layers import Dense

len(df.emotion.unique())

model=Sequential()
model.add(Dense(32, activation='relu',input_shape=(1000,)))
model.add(Dense(64,activation='relu'))
model.add(Dense(16,activation='relu'))
model.add(Dense(8,activation='relu'))
model.add(Dense(6, activation='softmax'))

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

from sklearn.model_selection import train_test_split
xtrain, xtest, ytrain, ytest=train_test_split(x, y, test_size=0.2, random_state=1)

model.fit(xtrain,ytrain, batch_size=100, epochs=20)

model.evaluate(xtest, ytest)

