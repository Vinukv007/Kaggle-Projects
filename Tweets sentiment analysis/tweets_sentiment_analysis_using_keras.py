# -*- coding: utf-8 -*-
"""Tweets Sentiment Analysis Kaggle.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/130xBOPDKt-VKd4LbCtZrEcYF_1Pp4V81

https://www.kaggle.com/datasets/youben/tweets-sentiment-analysis
"""

import pandas as pd
import numpy as np

df=pd.read_csv('train.csv', encoding='latin-1')
df.head()

df2=df[['SentimentText','Sentiment']]

df2.isna().sum()

df2.info()

df2.drop_duplicates(inplace=True)

df2.info()

"""using nlp to process the texts"""

import re
import nltk
from nltk.corpus import stopwords
from nltk.stem import PorterStemmer
ps=PorterStemmer()
nltk.download('stopwords')
sw=stopwords.words('english')

def clean_text(x):
  x=x.lower()
  x=re.sub('\W+', ' ',x).strip()
  x=re.sub('\d+', ' ', x).strip()
  x=re.sub('\s+', ' ', x).strip()
  x=[i for i in x.split() if i not in sw]
  x=[i for i in x if len(i)>2]
  x=[ps.stem(i) for i in x]
  x=' '.join(x).strip()
  return x

df2.SentimentText=df2.SentimentText.apply(clean_text)
df2.head()

from sklearn.feature_extraction.text import CountVectorizer
vec=CountVectorizer(max_features=5000)

count_x=vec.fit_transform(df2.SentimentText)

x=count_x.toarray()

y=df2.Sentiment

from sklearn.linear_model import LogisticRegression
from sklearn.naive_bayes import BernoulliNB, MultinomialNB
from sklearn.model_selection import GridSearchCV, train_test_split

xtrain, xtest, ytrain, ytest=train_test_split(x,y,test_size=0.2, random_state=1, stratify=y)



from tensorflow.keras import Sequential
from tensorflow.keras.layers import Dense

xtrain.shape

model=Sequential()
model.add(Dense(32, activation='relu',input_shape=(5000,)))
model.add(Dense(64,activation='relu'))
model.add(Dense(1, activation='sigmoid'))

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(xtrain, ytrain, batch_size=50, epochs=10)

loss, accuracy=model.evaluate(xtest, ytest, batch_size=50)

accuracy



vec=CountVectorizer(max_features=1000)

count_x=vec.fit_transform(df2.SentimentText)

x=count_x.toarray()

lr=LogisticRegression()
ber=BernoulliNB()
mul=MultinomialNB()

lr.fit(xtrain, ytrain)
lr.score(xtest, ytest)

ber.fit(xtrain, ytrain)
ber.score(xtest, ytest)

mul.fit(xtrain, ytrain)
mul.score(xtest, ytest)